/**
 * @file audio.cpp
 * @brief Plays audio
 *
 * @author Jotham Gates
 * @version 0.1
 * @date 2023-08-18
 */

#include "audio.h"

extern SemaphoreHandle_t serialMutex;
extern QueueHandle_t audioQueue;

// Converted from 'drwho_muted_processed' by TunePlayer Musescore plugin V1.8.2
const uint16_t drwho_muted_processed[] PROGMEM = {
    0xe083, // Tempo change to 131 BPM
    0x461a,0xc000,0x4612,0x463c,0x461a,0xc000,0x4612,0x463c,0x461a,0xc000,
    0x4612,0x463c,0x761c,0xc000,0x7612,0x763c,0x463d,0x461b,0x463c,0x461c,
    0xc000,0x4612,0x463c,0x461c,0x461a,0x463c,0x761d,0xc019,0x761b,0x763c,
    0x461b,0x461b,0x461b,0x463a,0x461b,0x461b,0x461b,0x463c,0x460d,0xc009,
    0x460d,0xc008,0x460a,0x463c,0x763a,0x760c,0xc000,0x6604,0xc000,0x2612,
    0x460a,0x460c,0xc000,0x4612,0x463c,0x460d,0xc009,0x460d,0xc000,0x4612,
    0x463c,0x460d,0xc009,0x460d,0xc000,0x4612,0x463c,0xba3c,0x0c3c,0xba7c,
    0x460d,0xc009,0x460d,0xc000,0x4612,0x463c,0xc008,0xc038,0x2c7c,0xba7c,
    0x460c,0x460c,0xc000,0x4612,0x463c,0xb40a,0xb40c,0xc000,0xb412,0xb43c,
    0xb43a,0xb41a,0x0604,0xc000,0x2604,0xc008,0xba3c,0x7a3c,0x4a3c,0xb83c,
    0x2a5c,0xc000,0x0a14,0xb85c,0x0a1c,0xb87c,0x463d,0x461b,0x463c,0xb41c,
    0xc000,0xb412,0x0c05,0xba55,0xb41c,0xc000,0xb412,0xb43c,0x263a,0x261c,
    0x061c,0xb41c,0xc000,0xb412,0xb43c,0xb41d,0xc019,0xb41b,0xb43c,0xb41c,
    0xc000,0xb412,0xb43c,0xb41d,0xc019,0xb41b,0xb41c,0xc000,0xb412,0xbd7c,
    0x7c3c,0xbc3c,0x9c54,0x7c14,0x6c0c,0x7cfc,0x7a3c,0x2e24,0xc000,0x4e2c,
    0x2e0c,0x0e1d,0x2e9d,0x2e1d,0x4e6d,0x2e0d,0x0e1d,0x2e0c,0x0e0c,0x2e1c,
    0x7c1c,0xc000,0xbc14,0x9cdc,0x7c0a,0x6c0c,0x7c7c,0x463d,0x461d,0x463c,
    0xb43d,0xb41b,0xb43c,0xb43d,0xb41b,0xb43c,0xb41c,0xc000,0xc000,0xb404,
    0xc008,0xb43d,0xb41d,0x263d,0x264d,0x061a,0xb43d,0xb41b,0xb43c,0xb41d,
    0xb43d,0xb43c,0xb43d,0xb41b,0xb41c,0xc000,0xc000,0xb40c,0xb43d,0xb41b,
    0xc018,0xc000,0xb412,0xb4fc,
    0xf000 // End of tune. Stop playing.
};

FlashTuneLoader flashLoader;  // Where the notes come from
ToneSound piezo(PIN_SPEAKER); // What plays the notes
TunePlayer tune;              // Coordinates everything and does things at the right times.

// Located here for now as the library doesn't like being included from other files.
void audioTask(void *pvParameters)
{
    // begin processing
    LOGD("AUDIO", "Beginning");
    while (true)
    {
        // // Wait for something to play.
        LOGD("AUDIO", "Waiting for a play instruction.");
        int fileIndex = 0;
        AlarmState state;
        xQueueReceive(audioQueue, (void *)&state, portMAX_DELAY);
        // TODO: Stop sound on clear;
        if (state != ALARM_OFF)
        {
            // Start playing
            LOGI("AUDIO", "Playing.");
            flashLoader.setTune(drwho_muted_processed);
            tune.begin(&flashLoader, &piezo);
            tune.play();

            // Play the file
            do
            {
                tune.update();
                yield();
            } while (tune.isPlaying());
            tune.stop(); // Go back to beginning.
        }
    }
}